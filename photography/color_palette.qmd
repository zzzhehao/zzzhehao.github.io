---
title: "Color palette"
format: html
css: color_palette/color_palette.css
include-after-body: 
  - text: |
      <script src="color_palette.js"></script>
---

```{r}
#| echo: false
#| output: false
#| warning: false

library(yaml)
library(glue)
library(knitr)
library(tidyverse)
# Read the YAML file
palettes <- yaml.load_file("photography/color_palette/palettes.yml")
```

```{r}
#| echo: false
#| output: asis
#| warning: false

generate_palette_html <- function(palette) {
  # Generate color bar HTML
  color_bar <- '<div class="color-bar">'
  rows <- ceiling(length(palette$colors) / 5)
  colors_per_row <- ceiling(length(palette$colors) / rows)

  for (row in 1:rows) {
    color_bar <- paste0(color_bar, '<div class="color-row">')
    start_index <- (row - 1) * colors_per_row + 1
    end_index <- min(row * colors_per_row, length(palette$colors))
    
    for (i in start_index:end_index) {
      color <- palette$colors[i]
      color_bar <- paste0(color_bar, glue('
  <div class="color-section" style="background-color: {color};">
  <span class="color-code" data-color="{color}">{color}</span>
  </div>
      '))
    }
    color_bar <- paste0(color_bar, '</div>')
  }
  color_bar <- paste0(color_bar, '</div>')
  
  # Generate image gallery HTML
  if (length(palette$photos) > 1) {
    image_gallery <- '
  <div class="image-gallery-container">
  <div class="image-gallery">
    '
    for (i in seq_along(palette$photos)) {
      image_gallery <- paste0(image_gallery, glue('

<img id="gallery-image-{i}-{palette$title}" class="gallery-image" src="../assets/palettes/{palette$photos[i]}" alt="Gallery Image {i}">'))
    }
    image_gallery <- paste0(image_gallery, '
  </div>
  <button class="nav-button"></button>
  </div>
    ')
  } else {
    image_gallery <- glue('
  <div class="image-gallery">
  <img src="../assets/palettes/{palette$photos[1]}" alt="{palette$title}" class="gallery-image">
  </div>
    ')
  }

  # Generate CSS-formatted palette
  css_palette <- paste0("/* Color Theme ", palette$title, " */\n")
  for (i in seq_along(palette$colors)) {
    css_palette <- paste0(css_palette, ".", tolower(gsub(" ", "-", palette$title)), "-hex-", i, ": { color: ", palette$colors[i], "; }\n")
  }

  # Generate R vector format
  r_vector <- paste0('c(', paste(shQuote(palette$colors), collapse = ', '), ")")
  
  # Combine all elements
  html <- glue('
  <div class="palette-container">
  <h2>{palette$title}</h2>
  <p class="palette-caption">{palette$caption}</p>
  <div class="palette-flex-container">
  <div class="color-bar-container">
  <div class="color-bar-wrapper">
  {color_bar}
  </div>
  <div class="button-container">
  <button class="copy-palette-button" data-palette="{css_palette}">Copy as CSS</button>
  <button class="copy-r-vector-button" data-vector="{r_vector}">Copy as R Vector</button>
  </div>
  </div>
  <div class="image-gallery-container">
  {image_gallery}
  </div>
  </div>
  </div>
  ')
  
  return(html)  # Return the HTML instead of using cat()
}

# Generate HTML for all palettes
html_output <- map(palettes, generate_palette_html) %>% 
  reduce(paste, sep = "\n")

cat(html_output)
```
